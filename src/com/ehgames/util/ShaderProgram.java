package com.ehgames.util;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ShaderProgram {
	public static void useFixedFunction(GL gl) {
		gl.useProgram(0);
	}
	
	private class AttachedShader {
		final Shader	shader;
		String			lastLinkingSource;
		boolean			needsAttached	= true;

		AttachedShader(Shader shader) {
			this.shader = shader;
		}
	}

	private final Map<Integer, AttachedShader>	shaders		= new HashMap<>();
	int											program;
	boolean										needsWork	= true;
	private boolean								usable		= false;
	private List<Shader>						toDispose	= new ArrayList<>();

	public void attach(Shader shader) {
		if(shader == null) {
			throw new IllegalArgumentException("Shader can not be null");
		}
		needsWork = true;
		AttachedShader attached = new AttachedShader(shader); 
		AttachedShader existing = shaders.put(shader.type, attached);
		if(existing != null) {
			existing.shader.attachedTo.remove(this);
		}
		if(!toDispose.contains(shader)) {
			toDispose.add(shader);
		}
	}
	
	public void detectFileChanges() {
		for(AttachedShader shader : shaders.values()) {
			if(shader.shader.detectFileChanges()) {
				shader.needsAttached = true;
			}
		}
	}
	
	private void doSetup(GL gl) {
		if(program == 0) {
			program = gl.createProgram();
		}
		
		boolean ok = true;
		for(AttachedShader shader : shaders.values()) {
			if(shader.needsAttached) {
				ok &= shader.shader.attach(gl, this);
				if(ok) shader.needsAttached = false;
			}
		}
		
		if(shaders.isEmpty()) {
			System.err.println("There are no shaders attached to this program!");
		} else if(ok) {
			gl.linkProgram(program);
			int result = gl.getProgrami(program, GL.VALIDATE_STATUS);
			ok = result == GL.TRUE;
			log(gl, ok ? System.out : System.err);
			for(AttachedShader shader : shaders.values()) {
				shader.lastLinkingSource = shader.shader.currentSource;
			}
		}
		
		needsWork = false;
		usable = ok;
	}
	
	private void log(GL gl, PrintStream logTo) {
		String result = gl.getProgramInfoLog(program);
		if(result != null && !result.isEmpty()) {
			logTo.println(result);
		}
	}
	
	/** 
	 * Checks to see whether the executables contained in this program
	 * can execute given the current OpenGL state.<br>
	 * The information generated by the validation process will be written to the console.
	 * This provides a way for OpenGL implementers to convey more information about why
	 * the current program is inefficient, suboptimal, failing to execute, and so on.
	 * @return true if validation succeeded, and false otherwise
	 */
	public boolean isValid(GL gl) {
		if(needsWork) {
			doSetup(gl);
		}
		
		if(!usable) return false;
		
		gl.validateProgram(program);
		int result = gl.getProgrami(program, GL.VALIDATE_STATUS);
		boolean valid = result == GL.TRUE;
		log(gl, valid ? System.out : System.err);
		return valid;
	}
	
	public void use(GL gl) {
		if(needsWork) {
			doSetup(gl);
		}
		
		if(usable) {
			gl.useProgram(program);
		}
	}
	
	public int getUniformLocation(String name, GL gl) {
		return gl.getUniformLocation(program, name);
	}
	
	public int getAttribLocation(String name, GL gl) {
		return gl.getAttribLocation(program, name);
	}
	
	public void destroyResources(GL gl) {
		if(program != 0) {
			gl.deleteProgram(program);
		}
		
		Iterator<Shader> iter = toDispose.iterator();
		while(iter.hasNext()) {
			Shader shader = iter.next();
			shader.destroy(gl);
			// should never throw an exception as there's
			// currently no way to unset a shader attachment completely
			if(shaders.get(shader.type).shader != shader) {
				iter.remove();
			}
		}
	}
	
	/**
	 * Creates a clone of this ShaderProgram for use in another thread.
	 */
	@Override
	public ShaderProgram clone() {
		ShaderProgram clone = new ShaderProgram();
		for(AttachedShader shader : shaders.values()) {
			clone.attach(shader.shader);
		}
		return clone;
	}
}
